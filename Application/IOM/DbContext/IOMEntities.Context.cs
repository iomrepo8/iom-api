//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IOM.DbContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<AccountMember> AccountMembers { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AspNetModule> AspNetModules { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserPermission> AspNetUserPermissions { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AttendanceOTUpdate> AttendanceOTUpdates { get; set; }
        public virtual DbSet<AttendanceStatusOption> AttendanceStatusOptions { get; set; }
        public virtual DbSet<AttendanceStatusUpdate> AttendanceStatusUpdates { get; set; }
        public virtual DbSet<EmployeeShift> EmployeeShifts { get; set; }
        public virtual DbSet<EmployeeStatu> EmployeeStatus { get; set; }
        public virtual DbSet<EODReport> EODReports { get; set; }
        public virtual DbSet<EODTaskItem> EODTaskItems { get; set; }
        public virtual DbSet<IOMTask> IOMTasks { get; set; }
        public virtual DbSet<IOMTeamTask> IOMTeamTasks { get; set; }
        public virtual DbSet<IpWhitelist> IpWhitelists { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationRecipientRole> NotificationRecipientRoles { get; set; }
        public virtual DbSet<NotificationSetting> NotificationSettings { get; set; }
        public virtual DbSet<NotificationType> NotificationTypes { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<Seat> Seats { get; set; }
        public virtual DbSet<SystemLog> SystemLogs { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TaskComment> TaskComments { get; set; }
        public virtual DbSet<TaskGroupItem> TaskGroupItems { get; set; }
        public virtual DbSet<TaskGroup> TaskGroups { get; set; }
        public virtual DbSet<TaskHistory> TaskHistories { get; set; }
        public virtual DbSet<TaskHistoryType> TaskHistoryTypes { get; set; }
        public virtual DbSet<TeamClientPOC> TeamClientPOCs { get; set; }
        public virtual DbSet<TeamDayOff> TeamDayOffs { get; set; }
        public virtual DbSet<TeamHoliday> TeamHolidays { get; set; }
        public virtual DbSet<TeamManager> TeamManagers { get; set; }
        public virtual DbSet<TeamMember> TeamMembers { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamSupervisor> TeamSupervisors { get; set; }
        public virtual DbSet<TeamTaskGroup> TeamTaskGroups { get; set; }
        public virtual DbSet<TeamTask> TeamTasks { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<UserDayOff> UserDayOffs { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
        public virtual DbSet<UserImageFile> UserImageFiles { get; set; }
        public virtual DbSet<UserNotificationSetting> UserNotificationSettings { get; set; }
        public virtual DbSet<UserShiftDetail> UserShiftDetails { get; set; }
        public virtual DbSet<UserTag> UserTags { get; set; }
        public virtual DbSet<UserTask> UserTasks { get; set; }
        public virtual DbSet<UserTaskGroup> UserTaskGroups { get; set; }
        public virtual DbSet<UserTaskNotification> UserTaskNotifications { get; set; }
        public virtual DbSet<UserWorkDay> UserWorkDays { get; set; }
        public virtual DbSet<vw_ActiveUsers> vw_ActiveUsers { get; set; }
        public virtual DbSet<vw_AgentTeamSupervisors> vw_AgentTeamSupervisors { get; set; }
        public virtual DbSet<vw_AllUsers> vw_AllUsers { get; set; }
        public virtual DbSet<vw_AttendanceDefaultView> vw_AttendanceDefaultView { get; set; }
        public virtual DbSet<vw_TaskClocker> vw_TaskClocker { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<AttendanceRow> AttendanceRows { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
    
        [DbFunction("Entities", "fn_GetAssignedAccounts")]
        public virtual IQueryable<fn_GetAssignedAccounts_Result> fn_GetAssignedAccounts(Nullable<int> userDetailsId)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetAssignedAccounts_Result>("[Entities].[fn_GetAssignedAccounts](@userDetailsId)", userDetailsIdParameter);
        }
    
        [DbFunction("Entities", "fn_GetAssignedTeams")]
        public virtual IQueryable<fn_GetAssignedTeams_Result> fn_GetAssignedTeams(Nullable<int> userDetailsId)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetAssignedTeams_Result>("[Entities].[fn_GetAssignedTeams](@userDetailsId)", userDetailsIdParameter);
        }
    
        [DbFunction("Entities", "fn_TimeKeepingMgtData")]
        public virtual IQueryable<fn_TimeKeepingMgtData_Result> fn_TimeKeepingMgtData(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_TimeKeepingMgtData_Result>("[Entities].[fn_TimeKeepingMgtData](@dateFrom, @dateTo)", dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_AttendanceDefaultView(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AttendanceDefaultView", dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_CollectTimeLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CollectTimeLogs");
        }
    
        public virtual int sp_DeleteTeam(Nullable<int> teamId)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("teamId", teamId) :
                new ObjectParameter("teamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTeam", teamIdParameter);
        }
    
        public virtual int sp_DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUser", userIdParameter);
        }
    
        public virtual ObjectResult<sp_GenerateEODReportPerUser_Result> sp_GenerateEODReportPerUser(string dateFrom, string dateTo, string userId)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GenerateEODReportPerUser_Result>("sp_GenerateEODReportPerUser", dateFromParameter, dateToParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAttendanceDefault_Result> sp_GetAttendanceDefault(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttendanceDefault_Result>("sp_GetAttendanceDefault", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetAttendanceStatusView_Result> sp_GetAttendanceStatusView(string dateFrom, string dateTo, string userId)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAttendanceStatusView_Result>("sp_GetAttendanceStatusView", dateFromParameter, dateToParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_GetChronoItems_Result> sp_GetChronoItems(Nullable<int> userId, string date)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetChronoItems_Result>("sp_GetChronoItems", userIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<sp_GetLatestAttendanceStatusUpdates_Result> sp_GetLatestAttendanceStatusUpdates(string dateFrom, string dateTo, string userId, Nullable<int> userDetailsId)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetLatestAttendanceStatusUpdates_Result>("sp_GetLatestAttendanceStatusUpdates", dateFromParameter, dateToParameter, userIdParameter, userDetailsIdParameter);
        }
    
        public virtual ObjectResult<sp_GetNotifications_Result> sp_GetNotifications(string dateFrom, string dateTo, Nullable<int> userDetailsId)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNotifications_Result>("sp_GetNotifications", dateFromParameter, dateToParameter, userDetailsIdParameter);
        }
    
        public virtual ObjectResult<sp_GetSentEODList_Result> sp_GetSentEODList(string dateFrom, string dateTo, Nullable<bool> withActionOnly)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var withActionOnlyParameter = withActionOnly.HasValue ?
                new ObjectParameter("withActionOnly", withActionOnly) :
                new ObjectParameter("withActionOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSentEODList_Result>("sp_GetSentEODList", dateFromParameter, dateToParameter, withActionOnlyParameter);
        }
    
        public virtual ObjectResult<sp_GetSentEODReport_Result> sp_GetSentEODReport(Nullable<int> eodId)
        {
            var eodIdParameter = eodId.HasValue ?
                new ObjectParameter("eodId", eodId) :
                new ObjectParameter("eodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSentEODReport_Result>("sp_GetSentEODReport", eodIdParameter);
        }
    
        public virtual ObjectResult<string> sp_GetSystemLogs(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetSystemLogs", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<sp_GetTeamManagersandSupervisors_Result> sp_GetTeamManagersandSupervisors(Nullable<int> teamId)
        {
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("teamId", teamId) :
                new ObjectParameter("teamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTeamManagersandSupervisors_Result>("sp_GetTeamManagersandSupervisors", teamIdParameter);
        }
    
        public virtual ObjectResult<sp_GetTimekeepingReport_Result> sp_GetTimekeepingReport(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTimekeepingReport_Result>("sp_GetTimekeepingReport", dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<string> sp_GetTimekeepingReportGridData(Nullable<int> userDetailsId, string dateFrom, string dateTo, string userIds, string accountIds, string teamIds)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("userIds", userIds) :
                new ObjectParameter("userIds", typeof(string));
    
            var accountIdsParameter = accountIds != null ?
                new ObjectParameter("accountIds", accountIds) :
                new ObjectParameter("accountIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("teamIds", teamIds) :
                new ObjectParameter("teamIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetTimekeepingReportGridData", userDetailsIdParameter, dateFromParameter, dateToParameter, userIdsParameter, accountIdsParameter, teamIdsParameter);
        }
    
        public virtual ObjectResult<string> sp_GetUserList(string dateNow, Nullable<int> userDetailsId, string userIds, string accountIds, string teamIds, Nullable<bool> showInactive)
        {
            var dateNowParameter = dateNow != null ?
                new ObjectParameter("dateNow", dateNow) :
                new ObjectParameter("dateNow", typeof(string));
    
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("userIds", userIds) :
                new ObjectParameter("userIds", typeof(string));
    
            var accountIdsParameter = accountIds != null ?
                new ObjectParameter("accountIds", accountIds) :
                new ObjectParameter("accountIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("teamIds", teamIds) :
                new ObjectParameter("teamIds", typeof(string));
    
            var showInactiveParameter = showInactive.HasValue ?
                new ObjectParameter("showInactive", showInactive) :
                new ObjectParameter("showInactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetUserList", dateNowParameter, userDetailsIdParameter, userIdsParameter, accountIdsParameter, teamIdsParameter, showInactiveParameter);
        }
    
        public virtual ObjectResult<sp_IOMTaskLookUp_Result> sp_IOMTaskLookUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_IOMTaskLookUp_Result>("sp_IOMTaskLookUp");
        }
    
        public virtual int sp_KickOutAllUsers(Nullable<System.DateTime> dateNow)
        {
            var dateNowParameter = dateNow.HasValue ?
                new ObjectParameter("dateNow", dateNow) :
                new ObjectParameter("dateNow", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_KickOutAllUsers", dateNowParameter);
        }
    
        public virtual int sp_UpdateUserActiveHours(Nullable<System.DateTime> dateNow)
        {
            var dateNowParameter = dateNow.HasValue ?
                new ObjectParameter("dateNow", dateNow) :
                new ObjectParameter("dateNow", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserActiveHours", dateNowParameter);
        }
    
        public virtual int sp_UpdateUserPermissions(string roleId, string userId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserPermissions", roleIdParameter, userIdParameter);
        }
    
        public virtual int sp_UpdateUserRole(string userId, string roleCode)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("roleCode", roleCode) :
                new ObjectParameter("roleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserRole", userIdParameter, roleCodeParameter);
        }
    
        public virtual int sp_UpdateUserRolePermissions(string roleId)
        {
            var roleIdParameter = roleId != null ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserRolePermissions", roleIdParameter);
        }
    
        public virtual ObjectResult<string> sp_GetAttendanceDefaultGridData(Nullable<int> userDetailsId, string dateFrom, string dateTo, string userIds, string accountIds, string teamIds)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("userIds", userIds) :
                new ObjectParameter("userIds", typeof(string));
    
            var accountIdsParameter = accountIds != null ?
                new ObjectParameter("accountIds", accountIds) :
                new ObjectParameter("accountIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("teamIds", teamIds) :
                new ObjectParameter("teamIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetAttendanceDefaultGridData", userDetailsIdParameter, dateFromParameter, dateToParameter, userIdsParameter, accountIdsParameter, teamIdsParameter);
        }
    
        public virtual ObjectResult<string> sp_GetTimekeepingManagementGridData(Nullable<int> userDetailsId, string dateFrom, string dateTo, string userIds, string accountIds, string teamIds, string tagIds, string roles)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("userIds", userIds) :
                new ObjectParameter("userIds", typeof(string));
    
            var accountIdsParameter = accountIds != null ?
                new ObjectParameter("accountIds", accountIds) :
                new ObjectParameter("accountIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("teamIds", teamIds) :
                new ObjectParameter("teamIds", typeof(string));
    
            var tagIdsParameter = tagIds != null ?
                new ObjectParameter("tagIds", tagIds) :
                new ObjectParameter("tagIds", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("roles", roles) :
                new ObjectParameter("roles", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetTimekeepingManagementGridData", userDetailsIdParameter, dateFromParameter, dateToParameter, userIdsParameter, accountIdsParameter, teamIdsParameter, tagIdsParameter, rolesParameter);
        }
    
        public virtual ObjectResult<sp_GetRecentNotifications_Result> sp_GetRecentNotifications(Nullable<int> userDetailsId)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRecentNotifications_Result>("sp_GetRecentNotifications", userDetailsIdParameter);
        }
    
        public virtual ObjectResult<sp_GetUserSuperiors_Result> sp_GetUserSuperiors(Nullable<int> userId, Nullable<int> notificationTypeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var notificationTypeIdParameter = notificationTypeId.HasValue ?
                new ObjectParameter("notificationTypeId", notificationTypeId) :
                new ObjectParameter("notificationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserSuperiors_Result>("sp_GetUserSuperiors", userIdParameter, notificationTypeIdParameter);
        }
    
        public virtual ObjectResult<string> sp_GetEODList(Nullable<int> userDetailsId, string dateFrom, string dateTo, string userIds, string accountIds, string teamIds, string tagIds, string roles, Nullable<bool> withActionOnly)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("userIds", userIds) :
                new ObjectParameter("userIds", typeof(string));
    
            var accountIdsParameter = accountIds != null ?
                new ObjectParameter("accountIds", accountIds) :
                new ObjectParameter("accountIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("teamIds", teamIds) :
                new ObjectParameter("teamIds", typeof(string));
    
            var tagIdsParameter = tagIds != null ?
                new ObjectParameter("tagIds", tagIds) :
                new ObjectParameter("tagIds", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("roles", roles) :
                new ObjectParameter("roles", typeof(string));
    
            var withActionOnlyParameter = withActionOnly.HasValue ?
                new ObjectParameter("withActionOnly", withActionOnly) :
                new ObjectParameter("withActionOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetEODList", userDetailsIdParameter, dateFromParameter, dateToParameter, userIdsParameter, accountIdsParameter, teamIdsParameter, tagIdsParameter, rolesParameter, withActionOnlyParameter);
        }
    
        public virtual ObjectResult<string> sp_TimekeepingManagementPhUsers(Nullable<int> userDetailsId, string dateFrom, string dateTo, string userIds, string accountIds, string teamIds, string tagIds, string roles)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("userIds", userIds) :
                new ObjectParameter("userIds", typeof(string));
    
            var accountIdsParameter = accountIds != null ?
                new ObjectParameter("accountIds", accountIds) :
                new ObjectParameter("accountIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("teamIds", teamIds) :
                new ObjectParameter("teamIds", typeof(string));
    
            var tagIdsParameter = tagIds != null ?
                new ObjectParameter("tagIds", tagIds) :
                new ObjectParameter("tagIds", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("roles", roles) :
                new ObjectParameter("roles", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_TimekeepingManagementPhUsers", userDetailsIdParameter, dateFromParameter, dateToParameter, userIdsParameter, accountIdsParameter, teamIdsParameter, tagIdsParameter, rolesParameter);
        }
    
        public virtual ObjectResult<string> sp_GetUserShiftData(Nullable<int> userDetailsId, string userIds, string accountIds, string teamIds, string tagIds, string roles)
        {
            var userDetailsIdParameter = userDetailsId.HasValue ?
                new ObjectParameter("userDetailsId", userDetailsId) :
                new ObjectParameter("userDetailsId", typeof(int));
    
            var userIdsParameter = userIds != null ?
                new ObjectParameter("userIds", userIds) :
                new ObjectParameter("userIds", typeof(string));
    
            var accountIdsParameter = accountIds != null ?
                new ObjectParameter("accountIds", accountIds) :
                new ObjectParameter("accountIds", typeof(string));
    
            var teamIdsParameter = teamIds != null ?
                new ObjectParameter("teamIds", teamIds) :
                new ObjectParameter("teamIds", typeof(string));
    
            var tagIdsParameter = tagIds != null ?
                new ObjectParameter("tagIds", tagIds) :
                new ObjectParameter("tagIds", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("roles", roles) :
                new ObjectParameter("roles", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetUserShiftData", userDetailsIdParameter, userIdsParameter, accountIdsParameter, teamIdsParameter, tagIdsParameter, rolesParameter);
        }
    
        [DbFunction("Entities", "fn_GetAccountList")]
        public virtual IQueryable<fn_GetAccountList_Result> fn_GetAccountList(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetAccountList_Result>("[Entities].[fn_GetAccountList](@dateFrom, @dateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("Entities", "fn_GetAttendanceData")]
        public virtual IQueryable<fn_GetAttendanceData_Result> fn_GetAttendanceData(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetAttendanceData_Result>("[Entities].[fn_GetAttendanceData](@dateFrom, @dateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("Entities", "fn_GetHoursLogByDate")]
        public virtual IQueryable<fn_GetHoursLogByDate_Result> fn_GetHoursLogByDate(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetHoursLogByDate_Result>("[Entities].[fn_GetHoursLogByDate](@dateFrom, @dateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("Entities", "fn_GetTeamList")]
        public virtual IQueryable<fn_GetTeamList_Result> fn_GetTeamList(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_GetTeamList_Result>("[Entities].[fn_GetTeamList](@dateFrom, @dateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("Entities", "fn_TimeKeepingData")]
        public virtual IQueryable<fn_TimeKeepingData_Result> fn_TimeKeepingData(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_TimeKeepingData_Result>("[Entities].[fn_TimeKeepingData](@dateFrom, @dateTo)", dateFromParameter, dateToParameter);
        }
    
        public virtual int iom_sp_team_default_tasks(Nullable<int> teamid)
        {
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("iom_sp_team_default_tasks", teamidParameter);
        }
    
        public virtual int sp_GetAttendanceOT(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("dateFrom", dateFrom) :
                new ObjectParameter("dateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("dateTo", dateTo) :
                new ObjectParameter("dateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetAttendanceOT", dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_UpdateUsersDayOff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUsersDayOff");
        }
    }
}
